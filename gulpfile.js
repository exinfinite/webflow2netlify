const themeName = "ex-misc";
const imgPrefix = 'LK_';
const subFolder = 'landing-page/'; // 需加後綴斜線：'subFolder/'
const urlReplace = {
    "https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=612310468a6e60f4610a55f4": `https://ex-cdn.netlify.app/vendors/jquery/jquery-3.5.1.min.js`,
};
const { task, series, src, dest, watch } = require('gulp'),
    fs = require('fs'),
    os = require('os'),
    crypto = require('crypto'),
    path = require('path'),
    args = require('yargs').argv,
    extract = require('extract-zip'),
    del = require('del'),
    copy = require('recursive-copy'),
    csv = require("csvtojson"),
    htmlmin = require('gulp-htmlmin'),
    dom = require("gulp-jsdom"),
    toml = require('toml');
const timestamp = Date.now();
const config = {
    "theme_zip": `./${themeName}.webflow.zip`,
    "theme_extract_dir": os.tmpdir() + '/webflow/' + crypto.randomBytes(16).toString('hex'),
    "publish_dir": args.target || 'public',
    "sub_dir": '',
    "copy_filter": [ //要複製的檔案
        'css/*',
        'fonts/*',
        'js/*',
        `images/${imgPrefix}*`,
        'images/favicon*',
        'images/webclip*',
        `${subFolder}*.html`
    ],
    "custom_dir": ['_custom'], //自訂資源位置
    "minifier": {
        "pages": [`${subFolder}*.html`], //要處理的頁面
        "base_url": ["../", `${subFolder}`], //要轉為相對根目錄路徑的字串
        "url_replace": { //url替換
            "css/normalize.css": "css/normalize.css",
            "css/webflow.css": `css/webflow.css`,
            "js/webflow.js": `js/webflow.js`,
            "_custom/js/main.js": `_custom/js/main.js`,
            "_custom/css/main.css": `_custom/css/main.css`,
            "images/favicon.png": "",
            "images/webclip.png": ""
        },
        "lreplace": {
            "https://./": "./",
            "http://./": "./"
        }
    }
};
config.minifier.url_replace[`css/${themeName}.webflow.css`] = `css/${themeName}.webflow.css`;
config.minifier.url_replace = Object.assign(config.minifier.url_replace, urlReplace);
const Color = {
    Reset: "\x1b[0m",
    Bright: "\x1b[1m",
    Dim: "\x1b[2m",
    Underscore: "\x1b[4m",
    Blink: "\x1b[5m",
    Reverse: "\x1b[7m",
    Hidden: "\x1b[8m",

    FgBlack: "\x1b[30m",
    FgRed: "\x1b[31m",
    FgGreen: "\x1b[32m",
    FgYellow: "\x1b[33m",
    FgBlue: "\x1b[34m",
    FgMagenta: "\x1b[35m",
    FgCyan: "\x1b[36m",
    FgWhite: "\x1b[37m",

    BgBlack: "\x1b[40m",
    BgRed: "\x1b[41m",
    BgGreen: "\x1b[42m",
    BgYellow: "\x1b[43m",
    BgBlue: "\x1b[44m",
    BgMagenta: "\x1b[45m",
    BgCyan: "\x1b[46m",
    BgWhite: "\x1b[47m"
}

function colorString(color, str) {
    return `${color}${str}${Color.Reset}`;
}

function colorLog(color, ...args) {
    console.log(...args.map(
        (it) => typeof it === "string" ? colorString(color, it) : it
    ));
}
async function copyFiles(src, target, filter = null) {
    return copy(src, path.join(__dirname, target), {
            overwrite: true,
            expand: true,
            dot: true,
            junk: true,
            filter: filter
        })
        .then(function(results) {
            console.info('Copied ' + results.length + ' files');
        })
        .catch(function(error) {
            console.error('Copy failed: ' + error);
            process.exit();
        });
}
task('extract zip', async function(done) {
    try {
        await extract(config.theme_zip, { dir: config.theme_extract_dir });
        done();
    } catch (err) {
        console.error(err);
        process.exit();
    }
});
task('create publish dir', function(done) {
    fs.mkdir(path.join(__dirname, config.publish_dir), { recursive: true }, (err) => err ? console.error(err) : '');
    done();
});
task('copy toml', function(done) {
    fs.copyFile("./netlify.toml", `./${config.publish_dir}/netlify.toml`, function(e) {});
    done();
});
task('copy custom dir', function(done) {
    config.custom_dir.forEach(async dir => {
        await copyFiles(path.join(__dirname, dir), `${config.publish_dir}/${dir}`);
    });
    done();
});
task('copy web', async function(done) {
    await copyFiles(config.theme_extract_dir, config.publish_dir, config.copy_filter);
    done();
});
task('html process', async function(done) {
    config.minifier.pages.forEach(page => {
        src(`${config.publish_dir}/${page}`)
            .pipe(htmlmin({ //html minify
                collapseWhitespace: true,
                removeComments: true,
                minifyJS: true,
                minifyCSS: true,
                includeAutoGeneratedTags: false,
                minifyURLs: url => {
                    config.minifier.base_url.forEach(base_url => {
                        if (url.startsWith(base_url)) {
                            url = url.replace(base_url, "");
                        }
                    });
                    if (config.minifier.url_replace.hasOwnProperty(url)) {
                        url = config.minifier.url_replace[url].trim() == '' ? '' : config.minifier.url_replace[url] + `?${timestamp}`;

                    }
                    Object.keys(config.minifier.lreplace).forEach(key => {
                        if (url.startsWith(key)) {
                            url = url.replace(key, config.minifier.lreplace[key]);
                        }
                    });
                    return url;
                }
            }))
            .pipe(dom(document => {
                document.querySelectorAll('[name="generator"]').forEach(function(el) {
                    el.remove();
                });
            }))
            .pipe(dom(document => {
                document.querySelectorAll('[href="#"]').forEach(function(el) {
                    el.removeAttribute('href');
                });
            }))
            .pipe(dom(document => { //remove cors resource
                document.querySelectorAll('[crossorigin]').forEach(function(el) {
                    el.removeAttribute('integrity');
                    el.removeAttribute('crossorigin');
                });
            }))
            .pipe(dom(document => { //remove vue img src
                document.querySelectorAll('[v-bind:src]').forEach(function(el) {
                    el.removeAttribute('src');
                });
            }))
            .pipe(dom(document => { //for instant page
                document.body.setAttribute('data-instant-allow-query-string', '');
            }))
            .pipe(dest(`${config.publish_dir}/${config.sub_dir}`));
    });
    done();
});
task('clean', () => {
    return del([config.theme_extract_dir]);
});

task('default', series('extract zip', 'create publish dir', 'copy custom dir', 'copy web', 'html process', 'copy toml'));

exports.watch = () => {
    watch(['./netlify.toml', './*.zip', '_custom/**/*'], series("default"));
};